项目概述
我们正在开发一个多人坦克对战游戏，使用Python和Pygame。项目分为单机版和联网版，采用乐观帧同步框架实现网络多人游戏。下面请容许我对该项目进行完整介绍

为了跟踪项目进度，我们设定以下开发里程碑：

里程碑 1：单机游戏原型
    实现了基本的游戏引擎
    创建了坦克、子弹、障碍物、地图等游戏元素
    添加了碰撞检测系统
    实现了简单的粒子系统（爆炸和火花效果）
    开发了单机游戏循环

里程碑 2：帧同步基础

    完成帧数据结构和协议
    实现客户端输入捕获和帧执行
    实现服务器帧收集和分发

里程碑 3：网络连接

    完成网络客户端和服务器
    实现基本的消息收发
    测试多客户端连接

里程碑 4：完整帧同步

    实现完整的帧同步流程
    测试多玩家游戏同步
    处理网络延迟和状态校验

里程碑 5：完整游戏

    实现游戏UI和菜单
    添加AI对手
    完成游戏房间和匹配功能

我会在下面的继续输出我们当前已经写好的代码，你先不用对我们做任何回答。


目前我们已经推进到里程碑3，但是目前的代码并不是按照下面的网络同步框架的，我希望将当前的代码更改成下面的框架，你可以先输出伪代码，不用输出真实代码。

1. Server和Client的逻辑帧率都是60fps，其中，逻辑帧率和实际帧率是不同的，逻辑帧率类似FixedDeltaTime，保证每个逻辑更新的DeltaTime都是相同的
2. Client只要有输入就往Server发送，Server拿到输入后会缓存起来。
3. Server每5帧才向所有Client广播所有Client的输入(这5帧叫做一个turn)，这个广播的输入都需要附带上当前Server的帧号，而这种帧我们叫输入帧，另外就是，Client就算没有输入也要将空输入传过来
4. Client类似一个帧播放器，正常情况下是按照本地逻辑帧率去播放，如果落后Server就追帧，如果超过Server的帧就等待。具体是这样的，Client收到Server广播的消息后会缓存起来，
    实际更新：
        检测当前收到的最新的输入帧ID：
            如果当前自己的帧ID落后最新的输入帧ID，则进行开始追帧
            如果当前自己的帧ID领先于最新的输入帧ID，则保持正常的逻辑更新

        检测自己的当前帧：
            如果当前帧是应该处理输入的帧（比如当前是第五帧），也就是刚经过一个turn，则才从消息缓存中搜索该帧号对应的输入帧，找到的话就将输入缓存到逻辑输入，找不到则停止逻辑更新
            如果当前帧不是处理输入帧的帧（比如1~4帧），则认为没有输入，相当于清空逻辑输入，执行这些帧的逻辑更新

    追帧：
        以当前帧是1，最新输入帧是15为例子，因为2~4以及6~9，10~14都是无输入的帧，我们只需要输入帧5和10，从自己的帧缓存中搜索，搜索不到的向服务器请求重新发送输入帧。
        补全缺失的输入帧后，就可以执行2~15这些帧的逻辑更新，追帧过程中要避免不断请求。

    逻辑更新：
        逻辑更新函数参数要包含DeltaTime，虽然这个DeltaTime我们知道是个FixedDeltaTime，但是其他模块是不用去管这个DeltaTime是来自哪里，只是认为他是逻辑更新的时间即可
        逻辑更新过程中读取输入的话要从逻辑输入那读取

5. 暂时不要进行预测和回滚


在这个框架上测试流程是这样的：
1. 启动Server，Server会等待一定数量的Client连接
2. 启动多个client，然后所有Client处于等待连接服务器的状态，不断向服务器地址发送自己的连接请求
3. Server被一定数量的Client连接后，会向所有Client发送游戏就绪的信号，以及所有Client的ID，以及发送到的Client的ID。
4. Client收到就绪的信号后会停止发送连接请求，然后加载资源和关卡，并且初始化地图以及所有对象（但是不会tick），此时Client进入Loading界面，画面显示当前这局游戏总共有多少玩家参与以及加载进度。需要注意，通过前面的Client ID，可以让不同的ID生成不同位置的坦克。
5. Client loading结束后发送一个信号给Server，告诉Server自己已经loading 结束，随时可以开始游戏
6. Server收到所有Client的准备好信号后，会计算当前时间500ms后的时间戳，这个叫时间戳叫 GameStartTime，然后封装进游戏开始的信号，广播给所有Client
7. Client收到游戏开始的信号后，提取出GameStartTime，等到了GameStartTime才开始逻辑更新，第一个tick是进入到游戏画面，这个GameStartTime的设计就是为了考虑Server发给Client的延迟，尽力保证Server和Client都是同步的
