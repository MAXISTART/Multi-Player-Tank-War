项目概述
我们正在开发一个多人坦克对战游戏，使用Python和Pygame。项目分为单机版和联网版，采用乐观帧同步框架实现网络多人游戏。下面请容许我对该项目进行完整介绍

为了跟踪项目进度，我们设定以下开发里程碑：

里程碑 1：单机游戏原型
    实现了基本的游戏引擎
    创建了坦克、子弹、障碍物、地图等游戏元素
    添加了碰撞检测系统
    实现了简单的粒子系统（爆炸和火花效果）
    开发了单机游戏循环

里程碑 2：帧同步基础

    完成帧数据结构和协议
    实现客户端输入捕获和帧执行
    实现服务器帧收集和分发

里程碑 3：网络连接

    完成网络客户端和服务器
    实现基本的消息收发
    测试多客户端连接

里程碑 4：完整帧同步

    实现完整的帧同步流程
    测试多玩家游戏同步
    处理网络延迟和状态校验

里程碑 5：完整游戏

    实现游戏UI和菜单
    添加AI对手
    完成游戏房间和匹配功能

目前我们已经推进到里程碑3，并且这一个阶段期待的网络同步框架是这样的
1. Server和Client的逻辑帧率都是60fps
2. Client只要有输入就往Server发送，Server拿到输入后会缓存起来。
3. Server每5帧才向所有Client广播所有Client的输入(这5帧叫做一个turn)，这个广播的输入都需要附带上当前Server的帧号，而这种帧我们叫输入帧
4. Client收到Server广播的消息后会缓存起来，自己update的时候，如果当前帧是应该处理输入的帧（比如当前是第五帧），则才从消息缓存中搜索该帧号对应的输入帧，找到的话就直接应用输入，找不到则停止逻辑更新，等待输入帧的到来
5. 暂时不要进行预测和回滚（后面再优化）

在这个框架上测试流程是这样的：
1. 启动Server，Server会等待一定数量的Client连接
2. 启动多个client，然后所有Client处于等待连接服务器的状态，不断向服务器地址发送自己的连接请求
3. Server被一定数量的Client连接后，会向所有Client发送游戏就绪的信号
4. Client收到就绪的信号后会停止发送连接请求，然后初始化游戏（加载资源和关卡），此时Client进入Loading界面，画面显示当前这局游戏总共有多少玩家参与以及加载进度，
5. Client loading结束后发送一个信号给Server，告诉Server自己已经loading 结束，随时可以开始游戏
5. Server收到所有Client的准备好信号后，会计算当前时间500ms后的时间戳，这个叫时间戳叫 GameStartTime，然后封装进游戏开始的信号，广播给所有Client
5. Client收到游戏开始的信号后，提取出GameStartTime，等到了GameStartTime才开始逻辑update，第一个tick是进入到游戏画面，这个GameStartTime的设计就是为了考虑Server发给Client的延迟，尽力保证Server和Client都是同步的

我会在下面的继续输出我们当前已经写好的代码，你先不用对我们做任何回答。